{%- macro ssl_secret(len=39) -%}
{{ salt['cmd.run_stdout']('openssl rand -base64 39') }}
{%- endmacro %}
{%- macro gpg_secret(ownername) -%}
{%- set batch = 'Key-Type: 1\nKey-Length: 2048\nExpire-Date: 0\n'+
    'Name-Real: '+ ownername+ '\n%secring -&1\n%pubring -&2\n%commit\n' -%}
{%- set gpg_call = 'gpg --quiet --no-default-keyring --enable-special-filenames --batch --yes --armor --gen-key' -%}
{{ salt['cmd.run_stdout'](gpg_call, stdin=batch) }}
{%- endmacro %}
# ecs configuration settings
# ##########################
# change ecs:settings: EMAIL_BACKEND to 'django.core.mail.backends.smtp.EmailBackend'
# change ecs:settings: ETHICS_COMMISSION_UUID to the desired uuid
# change ip number to target ip and add this to your dns config:
# {{ domain }}.   IN  A     1.2.3.4
# {{ domain }}.   IN  MX    10  {{ domain }}
# {{ domain }}.   IN  TXT   "v=spf1 mx ptr -all"

ssh_authorized_keys:
  # # you can put your ssh keys here, this is also used by cloud-init
  # - "ssh-rsa and some long glibberish somebody@somewhere"
{%- if extra.ssh_authorized_keys|d(false) %}
  {%- for key in extra.ssh_authorized_keys %}
  - {{ key }}
  {%- endfor %}
{%- else %}
{%- endif %}
ssh_deprecated_keys:
  # # you can copy deprecated keys here,
  # # state.highstate will remove these keys from allowed login,
  # # additionaly this section serves as log of past access keys
  # - "ssh-rsa and some long glibberish somebody@somewhere"
appliance:
  # # standby: default false, if set appliance will not activate
  # standby: true
  domain: {{ domain }}
  allowed_hosts: {{ domain }}
  ssl:
    letsencrypt:
      enabled: true
    # # client_certs_mandatory, default false, if true, always need a client certificate
    # client_certs_mandatory: true
    client_certs_mandatory: false
    # # key: if set ssl key for https host will be used, default empty
    # key: filename-key.pem
    # # cert: if set ssl key for https host will be used, default empty
    # cert: filename-cert.pem
  # # sentry:dsn set to your sentry url, must be the same as ecs_settings: SENTRY_DSN
{%- if extra.appliance.sentry.dsn|d(false) %}
  sentry:
{{ extra.appliance.sentry|yaml(false)|indent(4,True) }}
{%- else %}
  # sentry:
  #   dsn: 'https://url'
{%- endif %}
{%- if extra.appliance.metric|d(false) %}
  metric:
{{ extra.appliance.metric|yaml(false)|indent(4,True) }}
{%- else %}
  # metric:
  #   exporter: false
  #   server: false
  #   gui: false
  #   pghero: false
{%- endif %}
{%- if extra.appliance.git.source|d(false) %}
  git:
{{ extra.appliance.git|yaml(false)|indent(4,True) }}
{%- else %}
  # git:
  #   # default see appliance.include
  #   branch: master
  #   source: git_url
{%- endif %}
{%- if extra.appliance.extra.files|d(false) %}
  extra:
    files:
  {%- for f_dict in extra.appliance.extra.files %}
      - path: {{ f_dict.path }}
        content: |
    {%- for l in f_dict.content.split('\\n') %}
            {{ l }}
    {%- endfor %}
    {%- if f_dict.owner|d(false) %}
        owner: {{ f_dict.owner }}
    {%- endif %}
    {%- if f_dict.permissions|d(false) %}
        permissions: {{ f_dict.permissions }}
    {%- endif %}
  {%- endfor %}
{%- else %}
  # extra:  # write out extra files on appliance configure
  #   files:
  #     - path: /path/of/filename
  #       content: |
  #           # Your content here
  #       owner: user:group
  #       permissions: "0600"
{%- endif %}
  #   states: # include extra states at state.highstate
  #     - qrcode
  #   packages: # include extra packages at state.highstate
  #     - ghostscript
{%- if extra.appliance.env.package.keys|d(false) %}
  env:
    package:
      # # recipients: list of email addresses to send encrypted env package to
  {%- if extra.appliance.env.package.recipients|d(false) %}
      recipients: {{ extra.appliance.env.package.recipients }}
  {%- else %}
      # recipients: "email@address email@address"
  {%- endif %}
      keys:
  {%- for key in extra.appliance.env.package.keys %}
        - |
{{ key|indent(12,True) }}
  {%- endfor %}
{%- else %}
  # env:
  #   package:
  #     # # recipients: list of email addresses to send encrypted env package to
  #     recipients: "email@address email@address"
  #     keys: # list of public keys to be used by gpg to encrypt the env package
  #       - |
  #           # public gpg key here
{%- endif %}
  storage:
    # # setup: optional, will be executed via state.sls storage if volatile or data can not be found
    # setup: |
    # proxy_cache: true
    # # default false, if true 10 additional GB diskspace are used
    # # for operating polipo, a http proxy cache
    ignore: # default false, if true: will not look for ecs-volatile or ecs-data filesystem
      volatile: true
      data: true
  backup:
    url: file:///volatile/ecs-backup-test/
    encrypt: |
{{ gpg_secret('ecs_backup')|indent(8,True) }}

ecs:
{%- if extra.ecs.git.source|d(false) %}
  git:
{{ extra.ecs.git|yaml(false)|indent(4,True) }}
{%- else %}
  # git: # default see appliance.include
  #   branch: stable
  #   source: git_url
{%- endif %}
  userswitcher:
    enabled: false
  settings: |
      DOMAIN = '{{ domain }}'
      ABSOLUTE_URL_PREFIX = 'https://{}'.format(DOMAIN)
      ALLOWED_HOSTS = [DOMAIN, ]
      PDFAS_SERVICE = ABSOLUTE_URL_PREFIX+ '/pdf-as-web/'
      SECURE_PROXY_SSL = True
      ECS_REQUIRE_CLIENT_CERTS = True
      DEBUG = False
{%- if extra.appliance.sentry.dsn|d(false) %}
      SENTRY_DSN = '{{ extra.appliance.sentry.dsn }}'
{%- else %}
      # SENTRY_DSN = 'https://url' # set to sentry url if available
{%- endif %}
      ETHICS_COMMISSION_UUID = 'ecececececececececececececececec'

      SECRET_KEY = '{{ ssl_secret() }}'
      REGISTRATION_SECRET = '{{ ssl_secret() }}'
      PASSWORD_RESET_SECRET = '{{ ssl_secret() }}'

      EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
      EMAIL_BACKEND_UNFILTERED = 'django.core.mail.backends.smtp.EmailBackend'
      EMAIL_UNFILTERED_DOMAINS = () # = ('example.com',)

      SMTPD_CONFIG['listen_addr'] = ('0.0.0.0', 8025)
      SMTPD_CONFIG['domain'] = DOMAIN

      # User registration, password reset, send client certificate and mail to
      # receivers at a domain included in EMAIL_UNFILTERED_DOMAINS will be sent via
      # EMAIL_BACKEND_UNFILTERED. All other mail will be sent via EMAIL_BACKEND.
      #
      # Backend to use to NOT sent email but log email to console:
      #   django.core.mail.backends.console.EmailBackend
      #
      # Backend to use to send via EMAIL_* smtp settings:
      #   django.core.mail.backends.smtp.EmailBackend
      #

  vault_encrypt: |
{{ gpg_secret('ecs_mediaserver')|indent(6,True) }}

  vault_sign: |
{{ gpg_secret('ecs_authority')|indent(6,True) }}
