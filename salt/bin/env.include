#!/bin/bash

# get ecs appliance config from supported infrastructure:
# * local file /env.yml
# * iso-drive with label cidata (cloud-init: no-cloud config)
# * iso-drive with label config-2 (cloud-init: openstack config)
# * aws-ec2 (amazon elastic comuting cloud) meta-data server
# * gce (google compute engine) meta-data server
# convert yaml user-data to environment variables

extract_from_drive() {
    # FIXME: only first data_fn is checked
    lbl=$1
    shift
    data_fn=$1
    dev=/dev/disk/by-label/$lbl
    mp=$(lsblk -n -o MOUNTPOINT $dev)
    unmount_after_read=false
    found_user_data=false

    if "$mp" = ""; then
        unmount_after_read=true
        mkdir -p /mnt/$(basename $lbl)
        mount -r LABEL=$lbl /mnt/$lbl
        mp=$(lsblk -n -o MOUNTPOINT $dev)
    fi

    if test ! -e $mp/$data_fn; then
        data="error: could not find $data_fn on filesystem with label $lbl"
    else
        data="$(cat $mp/$data_fn | flatten_yaml.py ecs)\nECS_USERDATA_TYPE=\'$lbl\'"
        found_user_data=true
    fi

    if test $unmount_after_read; then
        umount $mp
    fi

    echo "$data"
    if test $found_user_data; then
        return 0
    else
        return 1
    fi
}


get_user_data() {
    ret=1
    if test -e /env.yml; then
        data="$(cat /env.yml | flatten_yaml.py ecs)\nECS_USERDATA_TYPE='local'"
        ret=$?
    fi
    if test $ret -ne 0; then
        if test -e /dev/disk/by-label/cidata; then
            data=$(extract_from_drive cidata user-data)
            ret=$?
        fi
    fi
    if test $ret -ne 0; then
        if test -e /dev/disk/by-label/config-2; then
            data=$(extract_from_drive config-2 openstack/latest/user_data openstack/2012-08-10/user_data)
            ret=$?
        fi
    fi
    if test $ret -ne 0; then
        if test $(curl --check 200 http://169.254.169.254/latest/user-data); then
            data="$(curl http://169.254.169.254/latest/user-data | flatten_yaml.py ecs)\nECS_USERDATA_TYPE='ec2'"
            ret=$?
        fi
    fi
    if test $ret -ne 0; then
        if test $(curl --check 200 -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/attributes/user-data); then
            data="$(curl -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/attributes/user-data | flatten_yaml.py ecs)\nECS_USERDATA_TYPE='gce'"
            ret=$?
        fi
    fi
    if test $ret -ne 0; then
        data="ECS_USERDATA_TYPE='error, did not find user-data, no provider left'"
    fi

    echo "$data"
    return $ret
}


update_env() {

    if test "$data" != ""; then
        for d in $data; do
            key, value = d
            if test $key not in env; then
                key=value
            fi
        done
    fi

}
