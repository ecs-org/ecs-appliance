#!/bin/bash

env_usage() {
    cat <<"EOF"
# get ecs appliance config (yaml) from supported infrastructure,
convert yaml to environment variables and activate in environment

Usage:

### read userdata yaml into variable x
```
. env.include; x=$(get_userdata); if test $? -ne 0; then echo "error"; fi
```

### read userdata yaml, convert it (tree filter=".", prefix="", postfix="")
```
. env.include; x=$(userdata_to_envlist ecs export\ ); if test $? -ne 0; then echo "error"; fi
```

### read userdata yaml, convert it and add to current environment
```
. env.include; update_env_from_userdata; if test $? -ne 0; then echo "error"; fi
```
ECS_ variables are now inside the running environment


## locations searched (in order) for environment
* absolute filepath set via environment variable ENV_YML
* local file /app/env.yml
* drive with label cidata (cloud-init: no-cloud config)
* drive with label config-2 (cloud-init: openstack config)
* aws-ec2 (amazon elastic computing cloud) meta-data server
* gce (google compute engine) meta-data server

EOF

}


extract_from_drive() {
    # call(lbl=label, data_fn*=data-filename)
    # FIXME only first data_fn is checked
    local lbl=$1
    local data_fn=$2
    local dev=/dev/disk/by-label/$lbl
    local mp=$(lsblk -n -o MOUNTPOINT $dev)
    local unmount_after_read=false
    local found_user_data=false
    local data

    if "$mp" = ""; then
        unmount_after_read=true
        mkdir -p /mnt/$(basename $lbl)
        mount -r LABEL=$lbl /mnt/$lbl
        mp=$(lsblk -n -o MOUNTPOINT $dev)
    fi

    if test ! -e $mp/$data_fn; then
        data="USERDATA_TYPE:\'error\'\nUSERDATA_ERR: could not find $data_fn on filesystem with label $lbl\n"
    else
        data="$(cat $mp/$data_fn)\nUSERDATA_TYPE: $lbl\n"
        found_user_data=true
    fi

    if test $unmount_after_read; then
        umount $mp
    fi

    printf "%s" "$data"
    if test $found_user_data; then
        return 0
    else
        return 1
    fi
}


curl_check200() {
    local data
    local ret
    data=$(curl --noproxy "*" --max-time 2 -s -I -X GET "$@")
    ret=$?
    if test $ret -ne 0; then
        return $ret
    fi
    printf "%s" "$data" | head -1 | grep -q '200 OK'
    return $?
}


curl_get() {
    curl --noproxy "*" --max-time 3 -s "$@"
}


get_userdata() {
    local ret=1
    local data
    if test -e "$ENV_YML"; then
        data="$(cat \"$ENV_YML\")\nUSERDATA_TYPE: local\n"
        ret=$?
    fi
    if test $ret -ne 0; then
        if test -e /app/env.yml; then
            data="$(cat /app/env.yml)\nUSERDATA_TYPE: local\n"
            ret=$?
        fi
    fi
    if test $ret -ne 0; then
        if test -e /dev/disk/by-label/cidata; then
            data=$(extract_from_drive cidata user-data)
            ret=$?
        fi
    fi
    if test $ret -ne 0; then
        if test -e /dev/disk/by-label/config-2; then
            data=$(extract_from_drive config-2 openstack/latest/user_data openstack/2012-08-10/user_data)
            ret=$?
        fi
    fi
    if test $ret -ne 0; then
        if test $(curl_check200 http://169.254.169.254/latest/user-data); then
            data="$(curl_get  http://169.254.169.254/latest/user-data)\nUSERDATA_TYPE: ec2\n"
            ret=$?
        fi
    fi
    if test $ret -ne 0; then
        if test $(curl_check200 -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/attributes/user-data); then
            data="$(curl_get -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/attributes/user-data)\nUSERDATA_TYPE: gce\n"
            ret=$?
        fi
    fi
    if test $ret -ne 0; then
        data="USERDATA_TYPE: error\nUSERDATA_ERR: 'did not find user-data, no provider left'\n"
    fi

    printf "%s" "$data"
    return $ret
}


userdata_to_envlist() {
    # call(tree filter=".", prefix="", postfix="")
    local userdata_yaml
    local userdata_env
    local tree_filter="$1"
    if test "$tree_filter" = ""; then tree_filter="."; fi

    userdata_yaml=$(get_userdata)
    if test $? -ne 0; then
        printf "%s" "$userdata_yaml"| grep USERDATA_ERR
        return 1
    fi

    userdata_env=$(printf "%s" "$userdata_yaml" | flatten_yaml.py "$tree_filter" "$2" "$3")
    ret=$?
    if test $ret -ne 0; then
        echo "error converting to env: $ret"
        return $ret
    fi

    printf "%s" "$data"
}


update_env_from_userdata() {
    local userdata_yaml=$(get_userdata)
    local userdata_env
    local fifoname
    local ret

    if test $? -ne 0; then
        echo "error reading userdata:"
        printf "%s" "$userdata_yaml"| grep USERDATA_ERR
        return 1
    fi

    echo "found user-data type: $(printf "%s" "$userdata_yaml" | grep USERDATA_TYPE)"
    userdata_env=$(printf "%s" "$userdata_yaml" | flatten_yaml.py ecs export\ )
    ret=$?
    if test $ret -ne 0; then
        echo "error converting userdata to env: $ret"
        return $ret
    fi

    echo "update env"
    fifoname=$(mktemp -u -t env_include_XXXXXX).fifo
    mkfifo -m 0600 $fifoname
    printf "%s" "$userdata_env" > $fifoname & (. $fifoname; ret=$?)
    rm $fifoname
    return $ret
}

#update_env_from_userdata
#ret=$?
#if test $ret -ne 0; then
#    echo "update_env returned error: $ret"
#fi
echo "env.include, use env_usage for help"
