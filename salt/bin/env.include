#!/bin/bash

usage() {
    cat <<"EOF"
get ecs appliance config (yaml) from supported infrastructure,
convert yaml to environment variables and activate in environment

usage: read yaml into variable x
. env.include; x=$(get_user_data)

usage: add ecs appliance config to current environment:
. env.include; update_env; if test $? -ne 0; then echo "error"; fi
ECS_ variables are now inside the running environment

supported infrastructure:
* local file /app/env.yml
* drive with label cidata (cloud-init: no-cloud config)
* drive with label config-2 (cloud-init: openstack config)
* aws-ec2 (amazon elastic computing cloud) meta-data server
* gce (google compute engine) meta-data server

EOF

}


extract_from_drive() {
    # call(lbl=label, data_fn=data-filename)
    # FIXME: only first data_fn is checked
    lbl=$1
    shift
    data_fn=$1
    dev=/dev/disk/by-label/$lbl
    mp=$(lsblk -n -o MOUNTPOINT $dev)
    unmount_after_read=false
    found_user_data=false

    if "$mp" = ""; then
        unmount_after_read=true
        mkdir -p /mnt/$(basename $lbl)
        mount -r LABEL=$lbl /mnt/$lbl
        mp=$(lsblk -n -o MOUNTPOINT $dev)
    fi

    if test ! -e $mp/$data_fn; then
        data="USERDATA_TYPE:\'error\'\nUSERDATA_ERR: could not find $data_fn on filesystem with label $lbl\n"
    else
        data="$(cat $mp/$data_fn)\nUSERDATA_TYPE: $lbl\n"
        found_user_data=true
    fi

    if test $unmount_after_read; then
        umount $mp
    fi

    printf "%s" "$data"
    if test $found_user_data; then
        return 0
    else
        return 1
    fi
}


curl_check200() {
    x=$(curl --noproxy "*" --max-time 2 -s -I -X GET "$@")
    ret=$?
    if test $ret -ne 0; then
        return $ret
    fi
    printf "%s" "$x" | head -1 | grep -q '200 OK'
    return $?
}


curl_get() {
    curl --noproxy "*" --max-time 3 -s "$@"
}


get_user_data() {
    ret=1
    if test -e /home/wuxxin/work/ecs-appliance/env.example.yml; then
        data="$(cat /home/wuxxin/work/ecs-appliance/env.example.yml)\nUSERDATA_TYPE: local\n"
        ret=$?
    fi
    if test $ret -ne 0; then
        if test -e /dev/disk/by-label/cidata; then
            data=$(extract_from_drive cidata user-data)
            ret=$?
        fi
    fi
    if test $ret -ne 0; then
        if test -e /dev/disk/by-label/config-2; then
            data=$(extract_from_drive config-2 openstack/latest/user_data openstack/2012-08-10/user_data)
            ret=$?
        fi
    fi
    if test $ret -ne 0; then
        if test $(curl_check200 http://169.254.169.254/latest/user-data); then
            data="$(curl_get  http://169.254.169.254/latest/user-data)\nUSERDATA_TYPE: ec2\n"
            ret=$?
        fi
    fi
    if test $ret -ne 0; then
        if test $(curl_check200 -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/attributes/user-data); then
            data="$(curl_get -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/attributes/user-data)\nUSERDATA_TYPE: gce\n"
            ret=$?
        fi
    fi
    if test $ret -ne 0; then
        data="USERDATA_TYPE: error\nUSERDATA_ERR: 'did not find user-data, no provider left'\n"
    fi

    printf "%s" "$data"
    return $ret
}


update_env() {
    userdata_yaml=$(get_user_data)
    if test $? -ne 0; then
        echo "error reading user-data: $(printf "%s" "$userdata_yaml"| grep USERDATA_ERR)"
        return 1
    fi

    echo "found user-data type: $(printf "%s" "$userdata_yaml" | grep USERDATA_TYPE)"
    userdata_env=$(printf "%s" "$userdata_yaml" | ./flatten_yaml.py ecs export\ )
    ret=$?
    if test $ret -ne 0; then
        echo "error converting to env: $ret"
        return $ret
    fi

    echo "update env"
    mkfifo -m 0600 /tmp/update_env_pipe
    printf "%s" "$userdata_env" > /tmp/update_env_pipe & (. /tmp/update_env_pipe; ret=$?)
    rm /tmp/update_env_pipe
    return $ret
}

#update_env
#ret=$?
#if test $ret -ne 0; then
#    echo "update_env returned error: $ret"
#fi
