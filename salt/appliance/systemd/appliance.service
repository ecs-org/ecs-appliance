[Unit]
Description=Appliance
ConditionPathExists=!/run/appliance-failed
ConditionFileNotEmpty=/run/active-env.yml
Requires=prepare-env.service prepare-appliance.service prepare-ecs.service
After=prepare-env.service update-appliance.service prepare-appliance.service prepare-ecs.service
Before=appliance-cleanup.service
OnFailure=appliance-failed@%n.service

# service enters failed state if:
#   it is restarted 3 times within 15 minutes (one minor-change service restart takes 3min30sec)
#   appliance_failed is called
# use `rm /run/appliance-failed; systemctl reset-failed` to recover from a failed state

[Service]
Type=simple
Restart=always
TimeoutStartSec=5min
StartLimitInterval=15min
StartLimitBurst=3
Environment=UNITNAME=%n
# XXX manual include env because EnvironmentFile is missing multiline var support
# EnvironmentFile=/run/active-env.env
Environment=ENV_YML=/run/active-env.yml
WorkingDirectory=/etc/appliance/ecs
ExecStart=/bin/bash -c '. /usr/local/etc/env.include; userdata_to_env ecs,appliance; \
    exec /usr/local/bin/docker-compose up --abort-on-container-exit'
ExecStartPost=/bin/bash -c '. /usr/local/etc/env.include; userdata_to_env ecs,appliance; \
    sleep 30; \
    (docker images -q ecs/ecs:latest || echo "invalid") > /etc/appliance/last_running_ecs_image; \
    rm -f /etc/appliance/last_failed_ecs; \
    . /usr/local/etc/appliance.include; appliance_status --disable'
ExecStop=/bin/bash -c '. /usr/local/etc/env.include; userdata_to_env ecs,appliance; \
    /usr/local/bin/docker-compose -f /etc/appliance/ecs/docker-compose.yml stop'
ExecStopPost=/bin/bash -c '. /usr/local/etc/env.include; userdata_to_env ecs,appliance; \
    . /usr/local/etc/appliance.include; appliance_status "Appliance Standby" "Appliance is stopped"'

[Install]
WantedBy=multi-user.target
