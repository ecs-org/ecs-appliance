user www-data;
worker_processes auto;
pid /run/nginx.pid;

events {
  # worker_connections: default is 512, but this includes connections to backends
  worker_connections 1024;
}

http {
  # performance: sendfile and tcp_nopush to on
  sendfile on;
  tcp_nopush on;
  types_hash_max_size 2048; # default is 1024
  server_tokens off; # minimal server information
  client_max_body_size 0; # 0=disabled, will be enforced by backend server

  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  ##
  # Logging Settings
  log_format main '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" "$http_user_agent" '
    '$scheme "$ssl_client_verify" "$ssl_client_serial" '
    '$upstream_header_time ';

  access_log syslog:server=unix:/dev/log main;
  error_log syslog:server=unix:/dev/log error;

  ##
  # Metric Settings
  # https://github.com/knyar/nginx-lua-prometheus
  lua_shared_dict prometheus_metrics 10M;
  lua_package_path "/etc/nginx/?.lua";
  init_by_lua_block {
    prometheus = require("prometheus").init("prometheus_metrics")
    metric_requests = prometheus:counter(
      "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
    metric_latency = prometheus:histogram(
      "nginx_http_request_duration_seconds", "HTTP request latency", {"host"},
      {0.005, 0.01, 0.02, 0.03, 0.05, 0.075, 0.1, 0.2, 0.3,0.4, 0.5, 0.75,
      1, 1.5, 2, 3, 4, 5, 10, 20, 30, 40, 50, 60})
    metric_upstream_header_latency = prometheus:histogram(
      "nginx_http_upstream_header_time_seconds", "Upstream header latency", {"host"},
      {0.005, 0.01, 0.02, 0.03, 0.05, 0.075, 0.1, 0.2, 0.3,0.4, 0.5, 0.75,
      1, 1.5, 2, 3, 4, 5, 10, 20, 30, 40, 50, 60})
  }

  server {
    listen {{ salt['pillar.get']('docker:ip') }}:9145;
    location /metrics {
      content_by_lua_block {
        prometheus:collect()
      }
    }
  }

  ##
  # http server
  server {
    listen 80 default_server;
    charset utf-8;

    # challenge directory for letsencrypt
    location /.well-known/acme-challenge {
        alias /app/etc/dehydrated/acme-challenge;
    }

    location / {
      # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.
      return 301 https://$host$request_uri;
    }
  }

  ##
  # https server
  server {
    listen 443 ssl http2;
    charset utf-8;

    # lua metric collection
    log_by_lua_block {
      local host = ngx.var.host:gsub("^www.", "")
      metric_requests:inc(1, {host, ngx.var.status})
      metric_latency:observe(ngx.now() - ngx.req.start_time(), {host})
      metric_upstream_header_latency:observe(
        tonumber(ngx.var.upstream_response_time), {host})
    }

    # SSL Settings
    # https://wiki.mozilla.org/Security/Server_Side_TLS
    # https://mozilla.github.io/server-side-tls/ssl-config-generator/
    # settings used: nginx, modern, nginx Server 1.10.+
    ssl_protocols TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
    ssl_prefer_server_ciphers on;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    # OCSP Stapling --- fetch OCSP records from URL in ssl_certificate and cache them
    ssl_stapling on;
    ssl_stapling_verify on;

    # proxy setup
    # https://www.nginx.com/resources/admin-guide/reverse-proxy/
    # http://nginx.org/en/docs/http/ngx_http_core_module.html#variables
    # https://gist.github.com/plentz/6737338
    # reset headers for backend (which trusts these headers):
    # X-Real-IP, X-Forwarded-For, X-Forwarded-Proto, X-Ssl-Client-Verify, X-Ssl-Client-Serial

    # proxy requests using http 1.1 (including keepalive)
    proxy_http_version 1.1;
    # $host= from the request line, or the “Host” request header, or the server name matching a request
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    # do not trust probably already set X-Forwarded-For but rewrite with $remote_addr
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Port $server_port;
    # $ssl_client_verify returns: "SUCCESS", "FAILED", and "NONE"
    proxy_set_header X-Ssl-Client-Verify $ssl_client_verify;
    # $ssl_client_serial returns: serial number of the client certificate
    proxy_set_header X-Ssl-Client-Serial $ssl_client_serial;

    location /.well-known/acme-challenge {
      alias /app/etc/dehydrated/acme-challenge;
    }

    error_page 503 /503.html;

    location /503.html {
      root /var/www/html;
      add_header Retry-After 30 always;
      internal;
    }

    # identity is either snakeoil (no identity, no proxy_pass, just status message and letsencrypt)
    # or current active env identity with corresponding keys and proxy definition
    # see template.identity and snakeoil.identity
    include /app/etc/server.identity;

  }
}
