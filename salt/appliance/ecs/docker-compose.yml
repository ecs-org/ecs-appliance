version: "2"

services:

  ecs.web:
    build:
      context: ecs
      args:
        - http_proxy
    image: ecs/ecs
    user: app
    volumes:
      - /data/ecs-storage-vault:/app/ecs-storage-vault
    environment:
      - ECS_SETTINGS=${ECS_SETTINGS}
    env_file:
      - service_urls.env
    ports:
      - "127.0.0.1:5000:5000"
    links:
      - redis
      - memcached
    network_mode: "bridge"
    command: web

  ecs.worker:
    build:
      context: ecs
      args:
        - http_proxy
    image: ecs/ecs
    user: app
    volumes:
      - /data/ecs-storage-vault:/app/ecs-storage-vault
    environment:
      - ECS_SETTINGS=${ECS_SETTINGS}
    env_file:
      - service_urls.env
    links:
      - redis
      - memcached
    network_mode: "bridge"
    command: worker

  ecs.beat:
    build:
      context: ecs
      args:
        - http_proxy
    image: ecs/ecs
    user: app
    environment:
      - ECS_SETTINGS=${ECS_SETTINGS}
    env_file:
      - service_urls.env
    links:
      - redis
      - memcached
    network_mode: "bridge"
    command: beat

  memcached:
    image: memcached
    network_mode: "bridge"

  redis:
    image: redis:3
    network_mode: "bridge"

  mocca:
    build:
      context: mocca
      args:
        - http_proxy
    image: ecs/mocca
    ports:
      - "127.0.0.1:5090:8080"
    network_mode: "bridge"

  pdfas:
    build:
      context: pdfas
      args:
        - http_proxy
    image: ecs/pdfas
    ports:
      - "127.0.0.1:5095:8080"
    network_mode: "bridge"

  cadvisor:
    image: google/cadvisor
    ports:
      - "127.0.0.1:5080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    network_mode: "bridge"
    command: ["", "--housekeeping_interval=5s"]
