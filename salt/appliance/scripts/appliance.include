#!/bin/bash

ECS_DATABASE="${ECS_DATABASE:-ecs}"
ECS_GIT_BRANCH="${ECS_GIT_BRANCH:-master}"
ECS_GIT_SOURCE="${ECS_GIT_SOURCE:-ssh://git@gogs.omoikane.ep3.at:10022/ecs/ecs.git}"
ECS_DOC_GIT_SOURCE="${ECS_DOC_GIT_SOURCE:-ssh://git@gogs.omoikane.ep3.at:10022/ecs/ecs-homepage.git}"
APPLIANCE_GIT_BRANCH=${APPLIANCE_GIT_BRANCH:-master}
APPLIANCE_GIT_SOURCE=${APPLIANCE_GIT_SOURCE:-ssh://git@gogs.omoikane.ep3.at:10022/ecs/ecs-appliance.git}

appliance_update_available(){
    local current_source target last_running
    local appliance_need_update=true
    if test -e /app/appliance; then
        cd /app/appliance
        current_source=$(gosu app git config --get remote.origin.url || echo "")
        if test "$APPLIANCE_GIT_SOURCE" = "$current_source"; then
            # fetch all updates from origin
            gosu app git fetch -a -p
            if test "$APPLIANCE_GIT_COMMITID" != ""; then
                target="$APPLIANCE_GIT_COMMITID"
            else
                target=$(gosu app git rev-parse origin/$APPLIANCE_GIT_BRANCH)
            fi
            last_running=$(gosu app git rev-parse HEAD)
            if test "$last_running" = "$target"; then
                appliance_need_update=false
            fi
        fi
    fi
    $appliance_need_update
}

ecs_update_available() {
    local current_source target last_running
    local ecs_need_update=true
    if test ! -e /app/bin/devupdate.sh; then
        if test -e /app/ecs; then
            cd /app/ecs
            current_source=$(gosu app git config --get remote.origin.url || echo "")
            if test "$ECS_GIT_SOURCE" = "$current_source"; then
                # fetch all updates from origin
                gosu app git fetch -a -p
                if test "$ECS_GIT_COMMITID" != ""; then
                    target="$ECS_GIT_COMMITID"
                else
                    target=$(gosu app git -C /app/ecs rev-parse origin/$ECS_GIT_BRANCH)
                fi
                last_running=$(cat /app/etc/tags/last_running_ecs 2> /dev/null || echo "invalid")
                if test "$last_running" = "$target"; then
                    ecs_need_update=false
                fi
            fi
        fi
    fi
    $ecs_need_update
}

update_available(){
    return $(appliance_update_available || ecs_update_available)
}

text2json(){
    python3 -c "import sys, json; \
    d={\"status\": sys.stdin.read().split(\"\n\")}; json.dump(d, sys.stdout)"
}

service_status(){
    systemctl status -l -q --no-pager -n 15 $@ | text2json
}

sentry_entry () {
    # call with (group,message,[level,[extra]]) , default level is error
    local group=$1
    local msg=$2
    local level=${3:-error}
    local extra=${4:-\{\}}
    local last_running_ecs=$(cat /app/etc/tags/last_running_ecs 2> /dev/null || echo "invalid")
    local last_build_ecs=$(cat /app/etc/tags/last_build_ecs 2> /dev/null || echo "invalid")
    local last_running_appliance=$(cat /app/etc/tags/last_running_appliance 2> /dev/null || echo "invalid")
    local last_running_ecs_image=$(cat /app/etc/tags/last_running_ecs_image 2> /dev/null || echo "invalid")
    local last_failed_ecs=$(cat /app/etc/tags/last_failed_ecs 2> /dev/null || echo "invalid")
    local current_appliance=$(gosu app git -C /app/appliance rev-parse HEAD)
    local tags="{\"group\": \"$group\", \
        \"last_running_ecs\": \"$last_running_ecs\", \
        \"last_build_ecs\": \"$last_build_ecs\", \
        \"last_running_appliance\": \"$last_running_appliance\", \
        \"last_failed_ecs\": \"$last_failed_ecs\", \
        \"last_running_ecs_image\": \"$last_running_ecs_image\"}"

    printf "Level: %s Group: %s Message: %s Extra: %s" "$level" "$group" "$msg" "$extra"
    if test -n "$APPLIANCE_SENTRY_DSN"; then
        SENTRY_DSN="$APPLIANCE_SENTRY_DSN" /usr/local/bin/ravencat.py \
            --culprit ${UNITNAME:-shellscript} \
            --logger appliance.status \
            --release "$current_appliance" \
            --site "$APPLIANCE_DOMAIN"  \
            --level "$level" \
            --tags "$tags" \
            --extra "$extra" \
            "$msg"
    fi
}

appliance_status () {
    # call(Title, Text)
    # or call("--disable")
    local templatefile=/app/etc/app-template.html
    local resultfile=/var/www/html/503.html
    local title text
    if test "$1" = "--disable"; then
        if test -e $resultfile; then
            rm -f $resultfile
            sentry_entry "Appliance Running" "Appliance started" "info"
        fi
    else
        echo "INFO: appliance status: $1 : $2"
        title=$(echo "$1" | tr / \\/)
        text=$(echo "$2" | tr / \\/)
        # XXX will fail if $text includes "/" characters
        cat $templatefile |
            sed -r "s/\{\{ ?title ?\}\}/$title/g;s/\{\{ ?text ?\}\}/$text/g" > $resultfile
        if test "$(id -u)" = "0"; then
            # if currently root, set owner to app, so app can also override current status
            chown app:app $resultfile
        fi
    fi
}

appliance_exit()
{
    appliance_status "$1" "$2"
    sentry_entry "$1" "$2" "$3" "$4"
    exit 1
}

appliance_failed()
{
    appliance_status "$1" "$2"
    sentry_entry "$1" "$2" critical "$4"
    touch /run/appliance-failed
    exit 1
}

is_truestr () {
    test "$(printf "%s" "$1" | tr A-Z a-z)" = "true"
}

is_falsestr () {
    test "$(printf "%s" "$1" | tr A-Z a-z)" != "true"
}

tune_postgresql () {
    local mem_kb mem_mb cores pg_mb
    local MAX_CONNECTIONS SHARED_BUFFERS WORK_MEM EFFECTIVE_CACHE_SIZE
    local pgcfg=/etc/postgresql/9.5/main/postgresql.conf
    #local template=/etc/postgresql/9.5/main/ecs.conf.template
    #fixme: disabled template until tested
    local template=/dev/null
    # tune postgresql to current vm memory and cores
    mem_kb=$(cat /proc/meminfo  | grep -i memtotal | sed -r "s/[^:]+: *([0-9]+) .*/\1/g")
    mem_mb=$(( mem_kb / 1024))
    cores=$(nproc)
    pg_mb=$((mem_mb - 1024 - cores * 1024)) # memory available for postgresql tuning
    if test "$pg_mb" -le 256; then pg_mb=256; fi
    MAX_CONNECTIONS=$((2+ cores+ 1+ cores+ 1+ 8)) # 1 core=14, 8 core=28
    SHARED_BUFFERS=$((pg_mb / 4))MB
    WORK_MEM=$((pg_mb / 4 * 1024 / MAX_CONNECTIONS))KB
    EFFECTIVE_CACHE_SIZE=$((192 * pg_mb/256))MB

    cp ${pgcfg} ${pgcfg}.org
    cat ${pgcfg}.org | \
        sed '/### ECS-CONFIG-BEGIN ###/,/### ECS-CONFIG-END ###/d' | \
        cat - $template | \
        sed -r "s/##MAX_CONNECTIONS##/$MAX_CONNECTIONS/g;s/##EFFECTIVE_CACHE_SIZE##/$EFFECTIVE_CACHE_SIZE/g" | \
        sed -r "s/##WORK_MEM##/$WORK_MEM/g;s/##SHARED_BUFFERS##/$SHARED_BUFFERS/g" > ${pgcfg}.new
    if ! diff -q ${pgcfg}.org ${pgcfg}.new; then
        echo "Changed postgresql ecs config"
        cp ${pgcfg}.new ${pgcfg}
        systemctl restart postgresql
    fi
}
