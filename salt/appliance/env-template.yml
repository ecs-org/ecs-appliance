#cloud-config
# XXX keep the "#cloud-config" line first and unchanged, software expects this header
{%- macro base64_secret(len=39) -%}
{{ salt['cmd.run_stdout']('openssl rand -base64 39') }}
{%- endmacro %}
{%- macro rsa_secret(len=2048) -%}
{{ salt['cmd.run_stdout']('openssl genrsa '+ len|string) }}
{%- endmacro %}
{%- macro rsa_public_from_secret(secret) -%}
{{ salt['cmd.run_stdout']("openssl rsa  -pubout | sed '1d;$d' | tr -d '\n'", stdin=secret, python_shell=True) }}
{%- endmacro %}
{%- macro gpg_secret(ownername) -%}
{%- set batch = 'Key-Type: 1\nKey-Length: 2048\nExpire-Date: 0\n'+
    'Name-Real: '+ ownername+ '\n%secring -&1\n%pubring -&2\n%commit\n' -%}
{%- set gpg_call = 'gpg --quiet --no-default-keyring --enable-special-filenames --batch --yes --armor --gen-key' -%}
{{ salt['cmd.run_stdout'](gpg_call, stdin=batch) }}
{%- endmacro %}
{%- set dkim_secretkey= rsa_secret() %}
{%- set dkim_publickey= rsa_public_from_secret(dkim_secretkey) %}
{%- if not extra.appliance|d(false) %}
  {%- set dummy=extra.__setitem__('appliance', {}) %}
{%- endif %}
{%- if not extra.ecs|d(false) %}
  {%- set dummy=extra.__setitem__('ecs', {}) %}
{%- endif %}

# change ecs:settings: EMAIL_BACKEND to 'django.core.mail.backends.smtp.EmailBackend'
# change ecs:settings: ETHICS_COMMISSION_UUID to the desired uuid
# add appliance:update:oncalendar to set a custom update schedule
# change dns domain to include (replace 1.2.3.4 and 4.3.2.1 with actual ip address):
# @   IN  A     1.2.3.4
# @   IN  MX    10  @
# @   IN  TXT   "v=spf1 a mx ptr ~all"
# default._domainkey    IN  TXT   ("v=DKIM1; k=rsa; s=email; "
#    "p={{ dkim_publickey[:250] }}"
#    "{{ dkim_publickey[250:] }}")
# for gui-dns: default.domainkey:v=DKIM1; k=rsa; s=email; p={{ dkim_publickey }}
# 4.3.2.1.in-addr.arpa. IN  PTR  {{ domain }}.

ssh_authorized_keys:
  # # you can put your ssh keys here, this is also used by cloud-init
  # - "ssh-rsa and some long glibberish somebody@somewhere"
{%- if extra.ssh_authorized_keys|d(false) %}
  {%- for key in extra.ssh_authorized_keys %}
  - {{ key }}
  {%- endfor %}
{%- else %}
{%- endif %}
ssh_deprecated_keys:
  # # you can copy deprecated keys here,
  # # state.highstate will remove these keys from allowed login,
  # # additionaly this section serves as log of past access keys
  # - "ssh-rsa and some long glibberish somebody@somewhere"
disable_root: false
# disable_root set to false for cloud-init compatibility, appliance expects root to be usable

appliance:
  # # standby: default false, if set appliance will not activate
  # standby: true
  domain: {{ domain }}
  allowed_hosts: {{ domain }}
  ssl:
    letsencrypt:
      enabled: true
    # # client_certs_mandatory, default false, if true, always need a client certificate
    # client_certs_mandatory: true
    client_certs_mandatory: false
    # # key: if set ssl key for https host will be used, default empty
    # key: filename-key.pem
    # # cert: if set ssl key for https host will be used, default empty
    # cert: filename-cert.pem
  # # sentry:dsn set to your sentry url, may be the same as ecs:settings:SENTRY_DSN
{%- if extra.appliance.sentry|d(false) %}
  sentry:
{{ extra.appliance.sentry|yaml(false)|indent(4,True) }}
{%- else %}
  # sentry:
  #   dsn: 'https://url'
{%- endif %}
{%- if extra.appliance.metric|d(false) %}
  metric:
{{ extra.appliance.metric|yaml(false)|indent(4,True) }}
{%- else %}
  # metric:
  #   exporter: false
  #   server: false
  #   gui: false
  #   pghero: false
{%- endif %}
{%- if extra.appliance.git|d(false) %}
  git:
{{ extra.appliance.git|yaml(false)|indent(4,True) }}
{%- else %}
  # git:
  #   # default see appliance.include
  #   branch: master
  #   source: git_url
{%- endif %}
{%- if extra.appliance.extra|d(false) and
    extra.appliance.extra.files|d(false) %}
  extra:
    files:
  {%- for f_dict in extra.appliance.extra.files %}
      - path: {{ f_dict.path }}
        contents: |
    {%- for l in f_dict.content.split('\\n') %}
            {{ l }}
    {%- endfor %}
    {%- if f_dict.owner|d(false) %}
        owner: {{ f_dict.owner }}
    {%- endif %}
    {%- if f_dict.permissions|d(false) %}
        permissions: {{ f_dict.permissions }}
    {%- endif %}
  {%- endfor %}
{%- else %}
  # extra:
  #   # write out extra files on state.highstate and prepare-appliance
  #   files:
  #     - path: /path/of/filename
  #       contents: |
  #           # Your content here
  #       owner: user:group
  #       permissions: "0600"
{%- endif %}
  #   # include extra packages, will be installed on state.highstate and prepare-appliance
  #   packages:
  #     - qrcode
  #   # states: # string to be executed as a salststack sls at state.highstate
  #   # # warning: syntax and execution errors will break initial deployment and appliance-update
  #   states: |
  #       testing:
  #         pkg.installed:
  #           - name: curl
  # # update:oncalendar: # set a different update timer than default: "*-*-* 06:30:00"
  # # update:automatic: # default to true, to disable automatic update set to false
  # # XXX do not update in the time between 00:30 and 06:30 because backup runs at this time
  # # XXX Important: use metric recording and active alert collection if you use automatic update
{%- if extra.appliance.update|d(false) %}
  update:
  {%- if extra.appliance.update.oncalendar|d(false) %}
    oncalendar: {{ extra.appliance.update.oncalendar }}
  {%- endif %}
    automatic: {{ extra.appliance.update.automatic|d(true) }}
{%- else %}
  # update:
  #   automatic: true
  #   oncalendar: Sun *-*-* 06:30:00
{%- endif %}
  storage:
    # # setup: optional, will be executed by appliance.storage.setup if volatile or data can not be found
    # setup: |
    #
    ignore: # default false, if true: will not look for ecs-volatile or ecs-data filesystem
      volatile: true
      data: true
  dkim:
    key: |
{{ dkim_secretkey|indent(8,True) }}
  backup:
    url: file:///volatile/ecs-backup-test/
    # options: "string of options directly passed to duplicity"
    # # mount default empty, script will mount & unmount source to target on backup run
    # mount:
    #   type: "cifs"
    #   source: "//1.2.3.4/datavolume"
    #   target: "/mnt/appliance-backup-mount"
    #   options: "user=username,pass=password"
    # # options are passed to mount via "-o"
    encrypt: |
{{ gpg_secret('ecs_backup')|indent(8,True) }}

ecs:
{%- if extra.ecs.git|d(false) %}
  git:
{{ extra.ecs.git|yaml(false)|indent(4,True) }}
{%- else %}
  # git: # default see appliance.include
  #   branch: stable
  #   source: git_url
{%- endif %}
  userswitcher:
    enabled: false
  settings: |
      DOMAIN = '{{ domain }}'
      ABSOLUTE_URL_PREFIX = 'https://{}'.format(DOMAIN)
      ALLOWED_HOSTS = [DOMAIN, ]
      PDFAS_SERVICE = ABSOLUTE_URL_PREFIX+ '/pdf-as-web/'
      SECURE_PROXY_SSL = True
      ECS_REQUIRE_CLIENT_CERTS = True
      DEBUG = False
{%- if extra.appliance.sentry|d(false) %}
      SENTRY_DSN = '{{ extra.appliance.sentry.dsn }}'
{%- else %}
      # SENTRY_DSN = 'https://url' # set to sentry url if available
{%- endif %}
      ETHICS_COMMISSION_UUID = 'ecececececececececececececececec'

      SECRET_KEY = '{{ base64_secret() }}'
      REGISTRATION_SECRET = '{{ base64_secret() }}'
      PASSWORD_RESET_SECRET = '{{ base64_secret() }}'

      EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
      EMAIL_BACKEND_UNFILTERED = 'django.core.mail.backends.smtp.EmailBackend'
      EMAIL_UNFILTERED_DOMAINS = () # = ('example.com',)

      SMTPD_CONFIG['listen_addr'] = ('0.0.0.0', 8025)
      SMTPD_CONFIG['domain'] = DOMAIN

      # User registration, password reset, send client certificate and mail to
      # receivers at a domain included in EMAIL_UNFILTERED_DOMAINS will be sent via
      # EMAIL_BACKEND_UNFILTERED. All other mail will be sent via EMAIL_BACKEND.
      #
      # Backend to use to NOT sent email but log email to console:
      #   django.core.mail.backends.console.EmailBackend
      #
      # Backend to use to send via EMAIL_* smtp settings:
      #   django.core.mail.backends.smtp.EmailBackend
      #

  vault_encrypt: |
{{ gpg_secret('ecs_mediaserver')|indent(6,True) }}

  vault_sign: |
{{ gpg_secret('ecs_authority')|indent(6,True) }}
